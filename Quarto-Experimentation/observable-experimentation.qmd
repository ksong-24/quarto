---
title: Experimenting with Observable - a series of tests
format: 
    html:
        code-fold: true
---

### OJS
```{ojs}
viewof densityLarger = Inputs.range([0.001, 20], {label: "ρM:", step: 0.001, value: 0.687})
```

```{ojs}
viewof densitySmaller = Inputs.range([0.001, 20], {label: "ρm", step: 0.001, value: 0.917})
```

```{ojs}
viewof primaryRadius = Inputs.range([2000, 70000], {label: "Radius of the Primary:", step: 1, value: 59232})
```

```{ojs}
import {Scrubber} from "@mbostock/scrubber"

viewof t = Scrubber(d3.ticks(0, 2 * Math.PI, 500), {
  autoplay: true,
  loop: true,
  initial: 0,
  format: x => `t = ${x.toFixed(3)}`
})
```

```{ojs}
viewof model = Inputs.radio(["Rigid", "Flui d"], {label: "Roche Limit Model: ", value: "Rigid"})
```


## Calculating the Roche limit

```{ojs}
{
  var limit;
  if (model == "Rigid"){
    limit = primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3)
  } else {
    limit = 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3)
  }
  return limit
}
```



## Working model

```{ojs}
{

  var limit;
  var limitColor;
  if (model == "Rigid"){
    limit = primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3)
    limitColor = '#f33333'
  } else {
    limit = 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3)
    limitColor = '#0033f0'
  }
  let target = DOM.element('div')
  const width = 600 
  const height = 400

// desired xDomain values
  const xScale = [-1, 2]
  functionPlot({
    width: width,
    height: height,

    yAxis: {domain: [-1*Math.pow(primaryRadius, 21/20)*2, Math.pow(primaryRadius, 21/20)*2]},
    xAxis: {domain: [-1*Math.pow(primaryRadius, 21/20)*3, Math.pow(primaryRadius, 21/20)*3]},
    xDomain: xScale,
    yDomain: computeYScale(width, height, xScale),
    target,
    data: [

    //outer circle
      { fn:  'sqrt(' + limit * limit + ' - x * x)', closed:true, color: limitColor, skipTip: true },
      { fn: '-sqrt(' + limit * limit + ' - x * x)', closed:true, color: limitColor, skipTip: true},
    
    //inner circle
      { fn: 'sqrt(' + primaryRadius * primaryRadius + ' - x * x)', closed:true, color: '#a88c4d', skipTip: true },
      { fn: '-sqrt(' + primaryRadius * primaryRadius + ' - x * x)', closed:true, color: '#a88c4d', skipTip: true, transparency: 0 },
    ]
  })

  return target
}
```

## Both Models

```{ojs}

{
  let target = DOM.element('div')
  const width = 600 
  const height = 400

// desired xDomain values
  const xScale = [-1, 2]
  functionPlot({
    width: width,
    height: height,
    grid: true,
    
    yLabel: 'test',
    yAxis: {domain: [-1*Math.pow(primaryRadius, 21/20)*2, Math.pow(primaryRadius, 21/20)*2]},
    xAxis: {domain: [-1*Math.pow(primaryRadius, 21/20)*3, Math.pow(primaryRadius, 21/20)*3]},
    xDomain: xScale,
    yDomain: computeYScale(width, height, xScale),
    target,
    data: [

    //rigid limit
      { fn: 'sqrt(' + primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3) * primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3) + ' - x * x)', closed:false, color: '#a3f333', skipTip: true, closed:true},
      { fn: '-sqrt(' + primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3) * primaryRadius * Math.pow(densityLarger/densitySmaller * 2, 1/3) + ' - x * x)', closed:false, color: '#a3f333', skipTip: true, closed:true},


    //fluid limit
      { fn: 'sqrt(' + 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3) * 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3) + ' - x * x)', closed:false, color: '#2555c0', skipTip: true},
      { fn: '-sqrt(' + 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3) * 2.44*primaryRadius*Math.pow(densityLarger/densitySmaller,1/3) + ' - x * x)', closed:false, color: '#2555c5', skipTip: true},
    
    //inner circle
      { fn: 'sqrt(' + primaryRadius * primaryRadius + ' - x * x)', closed:true, color: '#a88c4d', skipTip: true },
      { fn: '-sqrt(' + primaryRadius * primaryRadius + ' - x * x)', closed:true, color: '#a88c4d', skipTip: true },

      {points: [
      [primaryRadius * Math.cos(t), primaryRadius * Math.sin(t)],
    ],
    fnType: 'points',
    graphType: 'scatter'}
    ]
  })

  return target
}
```

## Drawing circles

```{ojs}

functionPlot = require("function-plot@1.22.2/dist/function-plot")
{
    let target = DOM.element('div')
  functionPlot({
    target,
    grid: true,
    data: [    
      { fn: 'sqrt(1 - x * x)', closed:true, color: '#000080', skipTip: true },
      { fn: '-sqrt(1 - x * x)', closed:true, color: '#000080', skipTip: true },

      { fn: 'sqrt(9 - x * x)', closed:false, color: '#000080' },
      { fn: '-sqrt(9 - x * x)', closed:false, color: '#000080' }
    ]
  })

  return target
}
```

## compute y scale function

```{ojs}
function computeYScale (width, height, xScale) {
  const xDiff = xScale[1] - xScale[0]
  const yDiff = height * xDiff / width
  return [-yDiff / 2, yDiff / 2]
}
```

## Drawing a circle using implicit functions

```{ojs}
{
  let target = DOM.element('div')
  functionPlot({
  target,
    grid: true,
  data: [
    {
    fn: 'x * x + y * y - 1',
    fnType: 'implicit',
    closed: true
  },
  
  {
    fn: 'x * x + y * y - 9',
    fnType: 'implicit',
  }]
})

  return target
}
```

## Nth Root function

```{ojs}
{
    let target = DOM.element('div')
    functionPlot({
  target,
  data: [{
    fn: 'nthRoot(x, 3)^2'
  }]
})
return target
}
```

